# name: test/sql/hnsw/hnsw_lateral_join.test
# group: [hnsw]

require vss

statement ok
CREATE TABLE a (a_vec FLOAT[3], a_id INT);

statement ok
CREATE TABLE b (b_vec FLOAT[3], b_str VARCHAR);

statement ok
INSERT INTO a VALUES (ARRAY[1.0, 2.0, 3.0], 1), (ARRAY[4.0, 5.0, 6.0], 2);

statement ok
INSERT INTO b VALUES (ARRAY[4.0, 5.0, 6.0], 'b'), (ARRAY[1.0, 2.0, 3.0], 'a');

statement ok
CREATE INDEX my_idx ON b USING HNSW (b_vec);

query IIIII rowsort
select * from a, lateral (select *, a_id as id_dup from b order by array_distance(a.a_vec, b.b_vec) limit 1);
----
[1.0, 2.0, 3.0]	1	[1.0, 2.0, 3.0]	a	1
[4.0, 5.0, 6.0]	2	[4.0, 5.0, 6.0]	b	2


# More advanced test, with additional projections
query IIIIII rowsort
select * from a, lateral (select array_distance(a.a_vec, b.b_vec) as dist, *, a_id as id_dup from b order by dist limit 1);
----
[1.0, 2.0, 3.0]	1	0.0	[1.0, 2.0, 3.0]	a	1
[4.0, 5.0, 6.0]	2	0.0	[4.0, 5.0, 6.0]	b	2

# Higher limit, with nulls
statement ok
DROP INDEX my_idx;

query IIIIII rowsort limit_2
select * from a, lateral (select *, a_id as id_dup from b order by array_distance(a.a_vec, b.b_vec) limit 2);

statement ok
CREATE INDEX my_idx ON b USING HNSW (b_vec);

query IIIIII rowsort limit_2
select * from a, lateral (select *, a_id as id_dup from b order by array_distance(a.a_vec, b.b_vec) limit 2);

statement ok
INSERT INTO b VALUES (NULL, 'none');

query IIIIII rowsort b_has_null
select * from a, lateral (select *, a_id as id_dup from b order by array_distance(a.a_vec, b.b_vec) limit 2);

statement ok
DROP INDEX my_idx;

query IIIIII rowsort b_has_null
select * from a, lateral (select *, a_id as id_dup from b order by array_distance(a.a_vec, b.b_vec) limit 2);

statement ok
INSERT INTO a VALUES (NULL, 3);

query IIIIII rowsort a_has_null
select * from a, lateral (select *, a_id as id_dup from b order by array_distance(a.a_vec, b.b_vec), b_str DESC limit 2);

statement ok
CREATE INDEX my_idx ON b USING HNSW (b_vec);

query IIIIII rowsort a_has_null
select * from a, lateral (select *, a_id as id_dup from b order by array_distance(a.a_vec, b.b_vec), b_str DESC limit 2);

# Test with a grouping function
query II rowsort
select a_id, list(b_str) from a, lateral (select *, a_id as id_dup from b order by array_distance(a.a_vec, b.b_vec), b_str limit 2) GROUP BY a_id;
----
1	[b, a]
2	[a, b]
3	[b, a]
